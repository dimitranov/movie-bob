{"version":3,"sources":["views/Home.tsx","firebase/config.ts","auth/AuthService.ts","components/SearchBar.tsx","views/Header.tsx","action/actions.ts","views/Login.tsx","views/Registration.tsx","App.tsx","serviceWorker.js","reducers/userReducer.ts","reducers/searchReducer.ts","store/store.ts","index.js"],"names":["Home","Component","connect","state","dispatch","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FB_auth","AuthService","email","password","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","currentUser","searchTypes","SearchBar","props","searchTimeout","value","searchType","onChange","e","onSearchTypeChange","currentTarget","map","type","key","name","persist","clearTimeout","setTimeout","onSearchValueChange","Header","_handleLogout","onLogoutRequest","to","this","searchValue","userIsLogged","onClick","mapDispatchToProps","payload","Promise","resolve","reject","Logout","then","data","catch","error","console","log","searchReducer","userReducer","logged","Login","handleChange","setState","target","handleLogin","_getLoginData","authError","message","loginData","Registration","passwordConfirm","localFormError","handleRegistration","_getRegistrationData","className","registrationData","Registrate","App","exact","path","Boolean","window","location","hostname","match","initialState","user","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1ab59f8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../store/store';\r\n\r\ntype StateProps = {\r\n\r\n}\r\n\r\ntype DispatchProps = {\r\n\r\n}\r\n\r\nclass Home extends Component<StateProps & DispatchProps, {}> {\r\n    render() {\r\n        return (\r\n            <div>\r\n                HOME\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Function) => ({\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\r\n","import * as firebase from \"firebase/app\";\r\n\r\nimport \"firebase/analytics\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyB82sHSgAFvXOV910ZQfQLbJSMKp2PM-3Y\",\r\n    authDomain: \"moviebob-2aa6e.firebaseapp.com\",\r\n    databaseURL: \"https://moviebob-2aa6e.firebaseio.com\",\r\n    projectId: \"moviebob-2aa6e\",\r\n    storageBucket: \"moviebob-2aa6e.appspot.com\",\r\n    messagingSenderId: \"66206003248\",\r\n    appId: \"1:66206003248:web:a476743044a57986137df5\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// export const FB_db = firebase.database().ref();\r\nexport const FB_auth = firebase.auth;\r\n\r\n","import { FB_auth } from \"../firebase/config\";\r\nimport { BaseCredentials } from \"../types/authTypes\";\r\n\r\nexport default class AuthService {\r\n\r\n    static Registrate({ email, password }: BaseCredentials): Promise<firebase.auth.UserCredential> {\r\n        return FB_auth().createUserWithEmailAndPassword(email, password);\r\n    }\r\n\r\n    static Login({ email, password }: BaseCredentials): Promise<firebase.auth.UserCredential> {\r\n        return FB_auth().signInWithEmailAndPassword(email, password);\r\n    }\r\n\r\n    static Logout(): Promise<void> {\r\n        return FB_auth().signOut();\r\n    }\r\n\r\n    static getCurrentUser(): firebase.User | null {\r\n        return FB_auth().currentUser;\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { BaseAction } from '../types/actionTypes';\r\n\r\nconst searchTypes = ['movie', 'tv-show', 'person'];\r\n\r\ntype SearchBarProps = {\r\n    searchValue: string,\r\n    searchType: string,\r\n    onSearchValueChange: (value: string) => BaseAction,\r\n    onSearchTypeChange: (type: string) => BaseAction\r\n}\r\n\r\nexport const SearchBar = (props: SearchBarProps) => {\r\n    let searchTimeout: ReturnType<typeof setTimeout>;\r\n\r\n    const onTypeChange = (e: React.FormEvent<HTMLSelectElement>) => {\r\n        props.onSearchTypeChange(e.currentTarget.value);\r\n    }\r\n\r\n    const onValueChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        e.persist();\r\n        const value = e.currentTarget.value;\r\n        if (searchTimeout) {\r\n            clearTimeout(searchTimeout);\r\n        }\r\n        searchTimeout = setTimeout(() => {\r\n            props.onSearchValueChange(value)\r\n        }, 500);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <select value={props.searchType} onChange={onTypeChange}>\r\n                {searchTypes.map((type) => <option value={type} key={type}>{type}</option>)}\r\n            </select>\r\n            <input type=\"text\" name=\"searchValue\" onChange={onValueChange} />\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { RootState } from '../store/store'\r\nimport { Link } from 'react-router-dom'\r\nimport { onSearchTypeChange, onSearchValueChange, onLogoutRequest } from '../action/actions'\r\nimport { SearchBar } from '../components/SearchBar'\r\nimport { BaseAction } from '../types/actionTypes'\r\n\r\ntype StateProps = {\r\n    userIsLogged: Boolean,\r\n    searchValue: string,\r\n    searchType: string\r\n}\r\n\r\ntype DispathProps = {\r\n    onSearchValueChange: (value: string) => BaseAction,\r\n    onSearchTypeChange: (type: string) => BaseAction\r\n    onLogoutRequest: () => BaseAction\r\n}\r\n\r\nclass Header extends Component<StateProps & DispathProps, {}> {\r\n\r\n    _handleLogout: () => void = () => {\r\n        this.props.onLogoutRequest();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Link to=\"/movie-bob/\">HOME</Link>\r\n                <SearchBar\r\n                    onSearchTypeChange={this.props.onSearchTypeChange}\r\n                    onSearchValueChange={this.props.onSearchValueChange}\r\n                    searchValue={this.props.searchValue}\r\n                    searchType={this.props.searchType}\r\n                />\r\n                {\r\n                    this.props.userIsLogged ?\r\n                        <span onClick={this._handleLogout}>LOGOUT</span> :\r\n                        <Link to=\"/movie-bob/login\">LOGIN</Link>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    searchValue: state.searchReducer.value,\r\n    searchType: state.searchReducer.type,\r\n    userIsLogged: state.userReducer.logged\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    onSearchTypeChange,\r\n    onSearchValueChange,\r\n    onLogoutRequest\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)\r\n","import { BaseAction } from './../types/actionTypes';\r\nimport { BaseCredentials } from '../types/authTypes';\r\nimport AuthService from '../auth/AuthService';\r\nimport { FB_auth } from '../firebase/config';\r\n\r\nexport const COUNT_CHANGE = 'COUNT_CHANGE';\r\nexport const CHANGE_COLOR = 'CHANGE_COLOR';\r\nexport const LOGIN = 'LOGIN';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const CHANGE_SEARCH_VALUE = 'CHANGE_SEARCH_VALUE';\r\nexport const CHANGE_SEARCH_TYPE = 'CHANGE_SEARCH_TYPE';\r\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nexport const REGISTRATION_REQUEST = 'REGISTRATION_REQUEST';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\n\r\n\r\n\r\nexport const changeCount = (payload: number): BaseAction => ({\r\n    type: COUNT_CHANGE,\r\n    payload\r\n});\r\n\r\nexport const loggin = (): BaseAction => ({\r\n    type: LOGIN\r\n})\r\n\r\nexport const logout = (): BaseAction => ({\r\n    type: LOGOUT\r\n})\r\n\r\nexport const onSearchValueChange = (value: string): BaseAction => ({\r\n    type: CHANGE_SEARCH_VALUE,\r\n    payload: value\r\n})\r\n\r\nexport const onSearchTypeChange = (type: string): BaseAction => ({\r\n    type: CHANGE_SEARCH_TYPE,\r\n    payload: type\r\n})\r\n\r\nexport function onLoginRequest(loginData: BaseCredentials): (dispatch: Function) => any {\r\n    return (dispatch: Function): Promise<unknown> => {\r\n        return new Promise((resolve, reject) => {\r\n            AuthService.Login(loginData)\r\n                .then((data) => {\r\n                    dispatch({\r\n                        type: LOGIN,\r\n                        payload: data\r\n                    });\r\n                    resolve(data);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    dispatch({\r\n                        type: AUTH_ERROR,\r\n                        payload: error\r\n                    });\r\n                    reject(error);\r\n                });\r\n        })\r\n    }\r\n}\r\n\r\nexport function onRegistrationRequest(registrationData: BaseCredentials): (dispatch: Function) => any {\r\n    return (dispatch: Function): Promise<unknown> => {\r\n        return new Promise((resolve, reject) => {\r\n            AuthService.Registrate(registrationData)\r\n                .then((data) => {\r\n                    dispatch({\r\n                        type: LOGIN,\r\n                        payload: data\r\n                    });\r\n                    resolve(data);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    dispatch({\r\n                        type: AUTH_ERROR,\r\n                        payload: error\r\n                    });\r\n                    reject(error);\r\n                });\r\n        })\r\n    }\r\n}\r\n\r\nexport function onLogoutRequest(): (dispatch: Function) => any {\r\n    return (dispatch: Function): Promise<unknown> => {\r\n        return new Promise((resolve, reject) => {\r\n            AuthService.Logout()\r\n                .then((data) => {\r\n                    dispatch({\r\n                        type: LOGOUT,\r\n                        payload: data\r\n                    });\r\n                    resolve(data);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(error);\r\n                });\r\n        })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { onLoginRequest } from '../action/actions'\r\nimport { BaseAction } from '../types/actionTypes'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport { BaseCredentials } from '../types/authTypes'\r\n\r\ntype LoginProps = {\r\n    handleLogin: (loginData: BaseCredentials) => BaseAction,\r\n    logged: Boolean,\r\n    authError: any\r\n}\r\n\r\nclass Login extends Component<LoginProps, BaseCredentials> {\r\n    state = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n\r\n    _getLoginData() {\r\n        return {\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        }\r\n    }\r\n\r\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ [e.target.name]: e.target.value } as { [P in keyof BaseCredentials]: BaseCredentials[P] });\r\n    }\r\n\r\n    handleLogin = () => {\r\n        this.props.handleLogin(this._getLoginData())\r\n    }\r\n\r\n    render() {\r\n        if (this.props.logged) {\r\n            return <Redirect to=\"/movie-bob/\" />\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                LOGIN\r\n                <label>\r\n                    EMAIL\r\n                    <input type=\"email\" value={this.state.email} name=\"email\" onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    PASSWORD\r\n                    <input type=\"text\" value={this.state.password} name=\"password\" onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n                <button onClick={this.handleLogin}>\r\n                    LOGIN\r\n                </button>\r\n                <br />\r\n                <Link to={'/movie-bob/registration'}>Registrate</Link>\r\n                {this.props.authError &&\r\n                    <span>{this.props.authError.message}</span>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    logged: state.userReducer.logged,\r\n    authError: state.userReducer.authError\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    handleLogin: onLoginRequest\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { onRegistrationRequest } from '../action/actions'\r\nimport { BaseCredentials } from '../types/authTypes'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype RegistrationState = {\r\n    email: string,\r\n    password: string,\r\n    passwordConfirm: string,\r\n    localFormError: string | null,\r\n}\r\n\r\ntype RegistrationProps = {\r\n    handleRegistration: (registrationData: BaseCredentials) => any,\r\n    logged: Boolean,\r\n    authError: any\r\n}\r\n\r\nclass Registration extends Component<RegistrationProps, RegistrationState> {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        passwordConfirm: '',\r\n        localFormError: null\r\n    }\r\n\r\n    _getRegistrationData() {\r\n        return {\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        }\r\n    }\r\n\r\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ [e.target.name]: e.target.value } as { [P in keyof RegistrationState]: RegistrationState[P] });\r\n    }\r\n\r\n    handleRegistration = (): void => {\r\n        this.setState({ localFormError: null });\r\n\r\n        if (this.state.password !== this.state.passwordConfirm) {\r\n            this.setState({ localFormError: 'Passwords dont match.' })\r\n            return;\r\n        }\r\n\r\n        this.props.handleRegistration(this._getRegistrationData())\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        if (this.props.logged) {\r\n            return <Redirect to=\"/movie-bob/\" />\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                Registration\r\n                <label>\r\n                    EMAIL\r\n                    <input type=\"email\" value={this.state.email} name=\"email\" onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    PASSWORD\r\n                    <input type=\"text\" value={this.state.password} name=\"password\" onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    CONFIRM PASSWORD\r\n                    <input type=\"text\" value={this.state.passwordConfirm} name=\"passwordConfirm\" onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n                <button onClick={this.handleRegistration}>\r\n                    Registration\r\n                </button>\r\n                {this.props.authError && <p className=\"red\">{this.props.authError.message}</p>}\r\n                {this.state.localFormError && <p className=\"red\">{this.state.localFormError}</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    logged: state.userReducer.logged,\r\n    authError: state.userReducer.authError\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    handleRegistration: onRegistrationRequest\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Registration)\r\n","import React from 'react';\r\nimport {\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport './App.scss';\r\nimport Home from './views/Home';\r\nimport Header from './views/Header';\r\nimport Login from './views/Login';\r\nimport Registration from './views/Registration';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Switch>\r\n        <Route exact path={\"/movie-bob/\"}>\r\n          <br />\r\n          <Header />\r\n          <Home />\r\n        </Route>\r\n        <Route exact path={\"/movie-bob/movie/:id\"}>\r\n          <br />\r\n          <Header />\r\n          <p>MOVIE</p>\r\n        </Route>\r\n\r\n        <Route exact path={\"/movie-bob/movies/:type\"}>\r\n          <br />\r\n          <Header />\r\n          <p>about</p>\r\n        </Route>\r\n\r\n        <Route exact path={\"/movie-bob/tv-show/:id\"}>\r\n          <br />\r\n          <Header />\r\n          <p>MOVIE</p>\r\n        </Route>\r\n\r\n        <Route exact path={\"/movie-bob/tv-show/:type\"}>\r\n          <br />\r\n          <Header />\r\n          <p>about</p>\r\n        </Route>\r\n        <Route exact path={\"/movie-bob/login\"}>\r\n          <br />\r\n          <Login />\r\n        </Route>\r\n        <Route exact path={\"/movie-bob/registration\"}>\r\n          <br />\r\n          <Registration />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n/*\r\nGenres\r\nTrending movies\r\nSearch by string\r\nDiscover - random movies by filters\r\nMovies - Top Rated, Now Playing, Latest, Upcoming, Popular\r\n*/","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { AUTH_ERROR } from './../action/actions';\r\nimport { BaseAction } from \"../types/actionTypes\";\r\nimport { LOGIN, LOGOUT } from \"../action/actions\";\r\n\r\ntype UserReducerState = {\r\n    logged: boolean,\r\n    user: any,\r\n    authError: any,\r\n};\r\n\r\nconst initialState = {\r\n    logged: false,\r\n    user: null,\r\n    authError: null\r\n};\r\n\r\nexport const userReducer = (state: UserReducerState = initialState, action: BaseAction) => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return { ...state, logged: true, user: action.payload.user };\r\n        case LOGOUT:\r\n            return { ...state, logged: false, user: null };\r\n        case AUTH_ERROR:\r\n            return { ...state, authError: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { CHANGE_SEARCH_VALUE, CHANGE_SEARCH_TYPE } from './../action/actions';\r\nimport { BaseAction } from \"../types/actionTypes\"\r\n\r\ntype SearchReducerState = {\r\n    value: string,\r\n    type: string\r\n}\r\n\r\nconst initialState = {\r\n    value: '',\r\n    type: 'movie'\r\n}\r\n\r\nexport const searchReducer = (state: SearchReducerState = initialState, action: BaseAction) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_VALUE:\r\n            return { ...state, value: action.payload }\r\n        case CHANGE_SEARCH_TYPE:\r\n            return { ...state, type: action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { createStore } from 'redux'\r\nimport { userReducer } from '../reducers/userReducer'\r\nimport { searchReducer } from '../reducers/searchReducer'\r\nimport { combineReducers, applyMiddleware } from 'redux'\r\nimport logger from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n    userReducer,\r\n    searchReducer\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.tsx';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './store/store.ts'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}